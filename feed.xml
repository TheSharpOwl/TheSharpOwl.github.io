<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://thesharpowl.github.io/</id><title>TheSharpOwl</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2023-04-07T00:37:57+03:00</updated> <author> <name>Mohamad Ziad Alkabakibi</name> <uri>https://thesharpowl.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://thesharpowl.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://thesharpowl.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 Mohamad Ziad Alkabakibi </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Compiling HLSL Shaders with Direct3D12 and CMake (With Error Reporting) Part 1</title><link href="https://thesharpowl.github.io/posts/COMIPLING_SHADERS_DIRECTD/" rel="alternate" type="text/html" title="Compiling HLSL Shaders with Direct3D12 and CMake (With Error Reporting) Part 1" /><published>2022-06-23T22:00:00+03:00</published> <updated>2023-02-24T21:28:44+03:00</updated> <id>https://thesharpowl.github.io/posts/COMIPLING_SHADERS_DIRECTD/</id> <content src="https://thesharpowl.github.io/posts/COMIPLING_SHADERS_DIRECTD/" /> <author> <name>Mohamad Ziad Alkabakibi</name> </author> <category term="Computer_Graphics" /> <category term="Direct3D_12" /> <summary> Note: This post is still in progress (don’t worry I am working on it almost everyday, I didn’t abandon it and it will be ready very soon). However, feel free to message me about improving the current draft if you have any ideas While learning Direct3D12 and working on my game engine Mizu I found that there are many ways to compile shaders but there is no clear documentation about the different... </summary> </entry> <entry><title>Using Bison C++ API With Hand-written Scanner</title><link href="https://thesharpowl.github.io/posts/HAND_WRITTEN_SCANNER_WITH_BISON_Cpp_API/" rel="alternate" type="text/html" title="Using Bison C++ API With Hand-written Scanner" /><published>2020-10-24T22:00:00+03:00</published> <updated>2022-07-08T02:07:15+03:00</updated> <id>https://thesharpowl.github.io/posts/HAND_WRITTEN_SCANNER_WITH_BISON_Cpp_API/</id> <content src="https://thesharpowl.github.io/posts/HAND_WRITTEN_SCANNER_WITH_BISON_Cpp_API/" /> <author> <name>Mohamad Ziad Alkabakibi</name> </author> <category term="Compilers" /> <category term="Bison" /> <summary> In this post, I’ll talk about how can you use Bison’s C++ API. Take a look at the tutorial I wrote about using C API especially the parts about installing Bison latest version and Compiler Construction. Also, to gain more knowledge about how Bison works. Well, as I said in the C API post, you can’t use dynamic types such as std::string or std::vector as Bison types which is one of the ... </summary> </entry> <entry><title>Using Bison C API With Hand-written Scanner</title><link href="https://thesharpowl.github.io/posts/HAND_WRITTEN_SCANNER_WITH_BISON_C_API/" rel="alternate" type="text/html" title="Using Bison C API With Hand-written Scanner" /><published>2020-10-18T12:00:00+03:00</published> <updated>2022-07-08T02:07:15+03:00</updated> <id>https://thesharpowl.github.io/posts/HAND_WRITTEN_SCANNER_WITH_BISON_C_API/</id> <content src="https://thesharpowl.github.io/posts/HAND_WRITTEN_SCANNER_WITH_BISON_C_API/" /> <author> <name>Mohamad Ziad Alkabakibi</name> </author> <category term="Compilers" /> <category term="Bison" /> <summary> You may have a compilers course and wanna learn how to use Bison with your other code. When I had this course I got in a big confusion while trying to use Bison with a Hand Written parser (in my opinion documentation isn’t easy for a bachelor and the deadline won’t wait for you to read all of it). As a result, I had to ask people just to know how to make Bison use my functions instead of Flex’... </summary> </entry> </feed>
